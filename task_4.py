"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

users = {'1': ['45', 1], '2': ['90', 0]}

#ВАРИАНТ 1
#в алгоритме много не доработано - обработка ошибок и вывод сообщений, но на это не хватило времени.

def activate(answer, key, dict):
    if answer == 'да': #1
        dict[key][1] = 1  #1

def access():
    ask_login = input('Введите логин ') #1
    ask_pass = input('Введите пароль ') #1
    for key, value in users.items():  #n
        if ask_login == key and ask_pass == value[0]:  #2
            if value[1] == 1: #1
                print('доступ разрешен')#1
                break
            else:
                ask_activate = input('Учетная запись не активирована, хотите активировать?(да/нет) ')#1
                activate(ask_activate, key, users) #2

access()
print(users)

#Сложность 2 + 7n = O(n)

# ВАРИАНТ 2
def acces_2():
    message = '' #1
    while True: #1
        ask_login = input('Введите логин ') #1
        ask_pass = input('Введите пароль ') #1
        for key, value in users.items():  #*n
            if ask_login == key: #1
                message = 'логин верный' #1
                if ask_pass == value[0]: #1
                    message = 'пароль верный' #1
                    if value[1] == 1: #1
                        message = 'учетка активна' #1
                    else:
                        ask_activate = input('Учетная запись не активирована, хотите активировать?(да/нет) ')  #1
                        if ask_activate == 'да':  #1
                            users[key][1] = 1   #1
                            message = 'Учетка активирована'  #1
                        else:
                            message = 'Учетка НЕ активирована'  #1
                        break
                else:
                    message = 'пароль НЕ верный'  #1
                    break

            else:
                message = 'нет такого юзера'  #1
        break
    print(message) #1

acces_2()
print(users)

#Сложность 4+ 14n = O(n)

""""
Вывод: с точки зрения Big O два алгоритма имеют одинаковую сложность. Но я выбал бы для работы второй алгоритм, так как
в такой реализации есть больше возножностей для функционала.
""""